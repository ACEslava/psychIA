{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["curPage","pageDisplay","pageChange","CustomEvent","detail","timelist","time","trials","StartScreen","React","useState","setShow","window","addEventListener","e","Button","style","position","top","left","color","variant","onClick","dispatchEvent","length","timelistIndex","Math","floor","random","splice","LearnTrigram","setTimeout","width","height","backgroundColor","zIndex","Typography","align","margin","WaitPeriod","RecallScreen","ResultsScreen","event","isComposing","keyCode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sQAIIA,EAAU,EACVC,EAAc,EAAC,GAAM,GAAO,GAAO,GAAO,GACxCC,EAAa,IAAIC,YAAY,UAAW,CAACC,OAAQJ,IACnDK,EAAW,GACXC,EAAO,EACPC,EAAS,EAEb,SAASC,IAAe,IAAD,EACGC,IAAMC,UAAS,GADlB,mBACRC,GADQ,WA4BrB,OAFAC,OAAOC,iBAAiB,WAAW,SAAUC,GAL5B,GAAXd,GACFW,GAAQ,MAIkD,GAG5D,8BACGV,EAAY,GACX,cAACc,EAAA,EAAD,CAAQC,MAAO,CACbC,SAAU,QACVC,IAAK,MACLC,KAAM,OACNC,MAAM,UACNC,QAAQ,YACRC,QAlCR,WACEtB,EAAU,EACVC,EAAY,IAAK,EACjBA,EAAY,IAAK,EACjBU,GAAQ,GACRC,OAAOW,cAAcrB,GAEE,GAAnBG,EAASmB,SACXnB,EAAW,CAAC,EAAG,IAAM,IAAM,IAAM,OAGnC,IAAIoB,EAAgBC,KAAKC,MAAMD,KAAKE,SAASvB,EAASmB,QACtDlB,EAAOD,EAASoB,GAChBpB,EAASwB,OAAOJ,EAAe,GAC/BlB,KAcI,mBAMyC,OAKjD,SAASuB,IAAgB,IAAD,EACErB,IAAMC,UAAS,GADjB,mBACTC,GADS,WAkBtB,OAFAC,OAAOC,iBAAiB,WAAW,SAAUC,GAZ5B,GAAXd,IACFW,GAAQ,GACRoB,YAAW,WACT9B,EAAY,IAAK,EACjBA,EAAY,IAAK,EACjBD,EAAU,EACVY,OAAOW,cAAcrB,GACrBS,GAAQ,KACP,SAIuD,GAG5D,8BAAMV,EAAY,GAAK,qBAAKe,MAAO,CACjCgB,MAAO,QACPC,OAAQ,QACRC,gBAAiB,UACjBjB,SAAU,QACVkB,OAAQ,IACRjB,IAAK,MACLC,KAAM,OAPe,SAQnB,cAACiB,EAAA,EAAD,CAAYC,MAAM,SAAShB,QAAQ,KAAKL,MAAO,CAC7CsB,OAAQ,OACRlB,MAAO,QACPH,SAAU,WACVC,IAAK,OAJP,uBAKK,OAKb,SAASqB,IAAc,IAAD,EACI9B,IAAMC,UAAS,GADnB,mBACPC,GADO,WAkBpB,OAFAC,OAAOC,iBAAiB,WAAW,SAAUC,GAZ5B,GAAXd,IACFW,GAAQ,GACRoB,YAAW,WACT9B,EAAY,IAAK,EACjBA,EAAY,IAAK,EACjBD,EAAU,EACVY,OAAOW,cAAcrB,GACrBS,GAAQ,KACPL,OAIuD,GAG5D,8BAAML,EAAY,GAAK,qBAAKe,MAAO,CACjCgB,MAAO,QACPC,OAAQ,QACRC,gBAAiB,UACjBjB,SAAU,QACVkB,OAAQ,IACRjB,IAAK,MACLC,KAAM,SACC,OAIb,SAASqB,IAAgB,IAAD,EACE/B,IAAMC,UAAS,GADjB,mBACTC,GADS,WAkBtB,OAFAC,OAAOC,iBAAiB,WAAW,SAAUC,GAZ5B,GAAXd,IACFW,GAAQ,GACRoB,YAAW,WACT9B,EAAY,IAAK,EACjBA,EAAY,IAAK,EACjBD,EAAU,EACVY,OAAOW,cAAcrB,GACrBS,GAAQ,KACP,SAIuD,GAG5D,8BAAMV,EAAY,GAAK,sBAAKe,MAAO,CACjCgB,MAAO,QACPC,OAAQ,QACRC,gBAAiB,UACjBjB,SAAU,QACVkB,OAAQ,IACRjB,IAAK,MACLC,KAAM,OAPe,UAQnB,cAACiB,EAAA,EAAD,CAAYC,MAAM,SAAShB,QAAQ,KAAKL,MAAO,CAC7CsB,OAAQ,OACRlB,MAAO,QACPH,SAAU,WACVC,IAAK,OAJP,kBAKA,cAACkB,EAAA,EAAD,CAAYC,MAAM,SAAShB,QAAQ,KAAKL,MAAO,CAC7CsB,OAAQ,OACRlB,MAAO,QACPH,SAAU,WACVC,IAAK,OAJP,+DAKK,OAIb,SAASuB,IAAiB,IAAD,EACChC,IAAMC,UAAS,GADhB,mBACVC,GADU,WAsBvB,OAHAC,OAAOC,iBAAiB,WAAW,SAAUC,GAf5B,GAAXd,GACFW,GAAQ,MAckD,GAC9DC,OAAOC,iBAAiB,WAXxB,SAAkB6B,IACZA,EAAMC,aAAiC,KAAlBD,EAAME,WAC7B3C,EAAY,IAAK,EACjBA,EAAY,IAAK,EACjBD,EAAU,EACVY,OAAOW,cAAcrB,GACrBS,GAAQ,OAKiC,GAG3C,8BAAMV,EAAY,GAAK,sBAAKe,MAAO,CACjCgB,MAAO,QACPC,OAAQ,QACRC,gBAAiB,UACjBjB,SAAU,QACVkB,OAAQ,IACRjB,IAAK,MACLC,KAAM,OAPe,UAQnB,cAACiB,EAAA,EAAD,CAAYC,MAAM,SAAShB,QAAQ,KAAKL,MAAO,CAC7CsB,OAAQ,OACRlB,MAAO,QACPH,SAAU,WACVC,IAAK,OAJP,oBAIoBZ,EAAK,IAJzB,OAKA,cAAC8B,EAAA,EAAD,CAAYC,MAAM,SAAShB,QAAQ,KAAKL,MAAO,CAC7CsB,OAAQ,OACRlB,MAAO,QACPH,SAAU,WACVC,IAAK,OAJP,0BAI0BX,EAJ1B,cAKK,OAuBEsC,MAnBf,WACE,OACE,sBAAK7B,MAAO,CACVgB,MAAO,QACPC,OAAQ,QACRC,gBAAiB,UACjBjB,SAAU,QACVkB,OAAQ,IACRjB,IAAK,MACLC,KAAM,OAPR,UAQI,cAACX,EAAD,IACA,cAACsB,EAAD,IACA,cAACS,EAAD,IACA,cAACC,EAAD,IACA,cAACC,EAAD,QCjNOK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.58916204.chunk.js","sourcesContent":["import './App.css';\nimport { Button, Typography } from \"@material-ui/core\"\nimport React from 'react';\n\nvar curPage = 0\nvar pageDisplay = [true, false, false, false, false];\nconst pageChange = new CustomEvent(\"newpage\", {detail: curPage});\nvar timelist = []\nvar time = 0\nvar trials = 0\n\nfunction StartScreen() {\n  const [show, setShow] = React.useState(true)\n  \n  function clickHandle() {\n    curPage = 1\n    pageDisplay[0] = false\n    pageDisplay[1] = true\n    setShow(false)\n    window.dispatchEvent(pageChange)\n    \n    if (timelist.length == 0) {\n      timelist = [0, 3000, 6000, 9000, 12000]\n    }\n\n    var timelistIndex = Math.floor(Math.random()*timelist.length)\n    time = timelist[timelistIndex]\n    timelist.splice(timelistIndex, 1)\n    trials ++ \n  }\n\n  function thisPage() {\n    if (curPage == 0) {\n      setShow(true)\n    }\n  }\n\n  window.addEventListener('newpage', function (e) {thisPage()}, false);\n\n  return (\n    <div>\n      {pageDisplay[0] ? \n        <Button style={{\n          position: \"fixed\", \n          top: \"50%\", \n          left: \"50%\" }} \n          color=\"primary\" \n          variant=\"contained\"\n          onClick={clickHandle}>Start</Button> : null}\n    </div>\n  )\n}\n\nfunction LearnTrigram() {\n  const [show, setShow] = React.useState(false)\n  \n  function thisPage() {\n    if (curPage == 1) {\n      setShow(true)\n      setTimeout(() => {\n        pageDisplay[1] = false\n        pageDisplay[2] = true\n        curPage = 2\n        window.dispatchEvent(pageChange)\n        setShow(false)\n      }, 3000)\n    }\n  }\n\n  window.addEventListener('newpage', function (e) {thisPage()}, false);\n\n  return (\n    <div>{pageDisplay[1] ? <div style={{\n      width: \"100vw\", \n      height: \"100vh\",\n      backgroundColor: \"#00CC66\",\n      position: \"fixed\",\n      zIndex: 100,\n      top: \"0px\",\n      left: \"0px\"}}>\n        <Typography align=\"center\" variant=\"h1\" style={{\n          margin: \"auto\",\n          color: \"white\",\n          position: \"relative\",\n          top: \"45%\"}}>XDF 202</Typography>\n    </div> : null}</div>\n  )\n\n}\n\nfunction WaitPeriod() {\n  const [show, setShow] = React.useState(false)\n  \n  function thisPage() {\n    if (curPage == 2) {\n      setShow(true)\n      setTimeout(() => {\n        pageDisplay[2] = false\n        pageDisplay[3] = true\n        curPage = 3\n        window.dispatchEvent(pageChange)\n        setShow(false)\n      }, time)\n    }\n  }\n\n  window.addEventListener('newpage', function (e) {thisPage()}, false);\n\n  return (\n    <div>{pageDisplay[2] ? <div style={{\n      width: \"100vw\", \n      height: \"100vh\",\n      backgroundColor: \"#00CC66\",\n      position: \"fixed\",\n      zIndex: 100,\n      top: \"0px\",\n      left: \"0px\"}}>\n    </div> : null}</div>\n  )\n}\n\nfunction RecallScreen() {\n  const [show, setShow] = React.useState(false)\n  \n  function thisPage() {\n    if (curPage == 3) {\n      setShow(true)\n      setTimeout(() => {\n        pageDisplay[3] = false\n        pageDisplay[4] = true\n        curPage = 4\n        window.dispatchEvent(pageChange)\n        setShow(false)\n      }, 5000)\n    }\n  }\n\n  window.addEventListener('newpage', function (e) {thisPage()}, false);\n\n  return (\n    <div>{pageDisplay[3] ? <div style={{\n      width: \"100vw\", \n      height: \"100vh\",\n      backgroundColor: \"#FF595E\",\n      position: \"fixed\",\n      zIndex: 100,\n      top: \"0px\",\n      left: \"0px\"}}>\n        <Typography align=\"center\" variant=\"h1\" style={{\n          margin: \"auto\",\n          color: \"white\",\n          position: \"relative\",\n          top: \"45%\"}}>Stop</Typography>\n        <Typography align=\"center\" variant=\"h2\" style={{\n          margin: \"auto\",\n          color: \"white\",\n          position: \"relative\",\n          top: \"55%\"}}>Recall the Trigram to the best of your ability</Typography>\n    </div> : null}</div>\n  )\n}\n\nfunction ResultsScreen() {\n  const [show, setShow] = React.useState(false)\n  \n  function thisPage() {\n    if (curPage == 4) {\n      setShow(true)\n    }\n  }\n\n  function nextPage(event) {\n    if (event.isComposing || event.keyCode === 32) {\n      pageDisplay[4] = false\n      pageDisplay[0] = true\n      curPage = 0\n      window.dispatchEvent(pageChange)\n      setShow(false)\n    }\n  }\n\n  window.addEventListener('newpage', function (e) {thisPage()}, false);\n  window.addEventListener('keydown', nextPage, false);\n\n  return (\n    <div>{pageDisplay[4] ? <div style={{\n      width: \"100vw\", \n      height: \"100vh\",\n      backgroundColor: \"#FF595E\",\n      position: \"fixed\",\n      zIndex: 100,\n      top: \"0px\",\n      left: \"0px\"}}>\n        <Typography align=\"center\" variant=\"h2\" style={{\n          margin: \"auto\",\n          color: \"white\",\n          position: \"relative\",\n          top: \"45%\"}}>{`[${time/1000}]`}</Typography>\n        <Typography align=\"center\" variant=\"h2\" style={{\n          margin: \"auto\",\n          color: \"white\",\n          position: \"relative\",\n          top: \"55%\"}}>{` Trial ${trials} of 5`}</Typography>\n    </div> : null}</div>\n  )\n}\n\nfunction App() {\n  return (\n    <div style={{\n      width: \"100vw\", \n      height: \"100vh\",\n      backgroundColor: \"#303030\",\n      position: \"fixed\",\n      zIndex: 100,\n      top: \"0px\",\n      left: \"0px\"}}>\n        <StartScreen/>\n        <LearnTrigram/>\n        <WaitPeriod/>\n        <RecallScreen/>\n        <ResultsScreen/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}