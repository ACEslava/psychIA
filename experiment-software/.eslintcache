[{"D:\\Documents\\Programming\\Psych IA\\experiment-software\\src\\App.js":"1","D:\\Documents\\Programming\\Psych IA\\experiment-software\\src\\index.js":"2","D:\\Documents\\Programming\\Psych IA\\experiment-software\\src\\reportWebVitals.js":"3"},{"size":7136,"mtime":1612395318154,"results":"4","hashOfConfig":"5"},{"size":455,"mtime":1612374507455,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1609741728114,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"4norin",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Documents\\Programming\\Psych IA\\experiment-software\\src\\App.js",["15","16","17","18","19","20","21","22","23","24","25","26","27","28","29"],"import './App.css';\nimport { Button, Typography } from \"@material-ui/core\"\nimport React from 'react';\nimport { useEffect } from 'react';\n\nvar curPage = 0\nvar pageDisplay = [true, false, false, false, false, false];\nconst pageChange = new Event(\"newpage\");\nvar timelist = [0, 3000, 6000, 9000, 12000]\nvar time = 0\nvar trials = 0\n\nfunction StartScreen() {\n  const [show, setShow] = React.useState(true)\n  \n  function clickHandle() {\n    curPage = 1\n    pageDisplay[0] = false\n    pageDisplay[1] = true\n    setShow(false)\n    window.dispatchEvent(pageChange)\n    \n    var timelistIndex = Math.floor(Math.random()*timelist.length)\n    time = timelist[timelistIndex]\n    timelist.splice(timelistIndex, 1)\n    trials ++ \n  }\n\n  function thisPage() {\n    if (curPage == 0) {\n      setShow(true)\n    }\n  }\n\n  window.addEventListener('newpage', function (e) {thisPage()}, false);\n\n  return (\n    <div>\n      {pageDisplay[0] ? \n        <Button style={{\n          position: \"fixed\", \n          top: \"50%\", \n          left: \"50%\" }} \n          color=\"primary\" \n          variant=\"contained\"\n          onClick={clickHandle}>Start</Button> : null}\n    </div>\n  )\n}\n\nfunction LearnTrigram() {\n  const [show, setShow] = React.useState(false)\n  \n  function thisPage() {\n    if (curPage == 1) {\n      setShow(true)\n      setTimeout(() => {\n        pageDisplay[1] = false\n        pageDisplay[2] = true\n        curPage = 2\n        window.dispatchEvent(pageChange)\n        setShow(false)\n      }, 3000)\n    }\n  }\n\n  window.addEventListener('newpage', function (e) {thisPage()}, false);\n\n  return (\n    <div>{pageDisplay[1] ? <div style={{\n      width: \"100vw\", \n      height: \"100vh\",\n      backgroundColor: \"#00CC66\",\n      position: \"fixed\",\n      zIndex: 100,\n      top: \"0px\",\n      left: \"0px\"}}>\n        <Typography align=\"center\" variant=\"h1\" style={{\n          margin: \"auto\",\n          color: \"white\",\n          position: \"relative\",\n          top: \"45%\"}}>XDF 202</Typography>\n    </div> : null}</div>\n  )\n\n}\n\nfunction WaitPeriod() {\n  const [show, setShow] = React.useState(false)\n  \n  function thisPage() {\n    if (curPage == 2) {\n      setShow(true)\n      setTimeout(() => {\n        pageDisplay[2] = false\n        pageDisplay[3] = true\n        curPage = 3\n        window.dispatchEvent(pageChange)\n        setShow(false)\n      }, time)\n    }\n  }\n\n  window.addEventListener('newpage', function (e) {thisPage()}, false);\n\n  return (\n    <div>{pageDisplay[2] ? <div style={{\n      width: \"100vw\", \n      height: \"100vh\",\n      backgroundColor: \"#00CC66\",\n      position: \"fixed\",\n      zIndex: 100,\n      top: \"0px\",\n      left: \"0px\"}}>\n    </div> : null}</div>\n  )\n}\n\nfunction RecallScreen() {\n  const [show, setShow] = React.useState(false)\n  \n  function thisPage() {\n    if (curPage == 3) {\n      setShow(true)\n      setTimeout(() => {\n        pageDisplay[3] = false\n        pageDisplay[4] = true\n        curPage = 4\n        window.dispatchEvent(pageChange)\n        setShow(false)\n      }, 6000)\n    }\n  }\n\n  window.addEventListener('newpage', function (e) {thisPage()}, false);\n\n  return (\n    <div>{pageDisplay[3] ? <div style={{\n      width: \"100vw\", \n      height: \"100vh\",\n      backgroundColor: \"#FF595E\",\n      position: \"fixed\",\n      zIndex: 100,\n      top: \"0px\",\n      left: \"0px\"}}>\n        <Typography align=\"center\" variant=\"h1\" style={{\n          margin: \"auto\",\n          color: \"white\",\n          position: \"relative\",\n          top: \"45%\"}}>Stop</Typography>\n        <Typography align=\"center\" variant=\"h2\" style={{\n          margin: \"auto\",\n          color: \"white\",\n          position: \"relative\",\n          top: \"55%\"}}>Recall the Trigram to the best of your ability</Typography>\n    </div> : null}</div>\n  )\n}\n\nfunction ResultsScreen() {\n  const [show, setShow] = React.useState(false)\n  \n  function thisPage() {\n    if (curPage == 4) {\n      setShow(true)\n      setTimeout(() => {\n        pageDisplay[4] = false\n        pageDisplay[5] = true\n        curPage = 5\n        window.dispatchEvent(pageChange)\n        setShow(false)\n      }, 6000)\n    }\n  }\n\n  window.addEventListener('newpage', function (e) {thisPage()}, false);\n\n  return (\n    <div>{pageDisplay[4] ? <div style={{\n      width: \"100vw\", \n      height: \"100vh\",\n      backgroundColor: \"#FF595E\",\n      position: \"fixed\",\n      zIndex: 100,\n      top: \"0px\",\n      left: \"0px\"}}>\n        <Typography align=\"center\" variant=\"h2\" style={{\n          margin: \"auto\",\n          color: \"white\",\n          position: \"relative\",\n          top: \"45%\"}}>{`[${time/1000}]`}</Typography>\n        <Typography align=\"center\" variant=\"h2\" style={{\n          margin: \"auto\",\n          color: \"white\",\n          position: \"relative\",\n          top: \"55%\"}}>{` Trial ${trials} of 5`}</Typography>\n    </div> : null}</div>\n  )\n}\n\nfunction RestScreen() {\n  const [show, setShow] = React.useState(false)\n  const [seconds, setSeconds] = React.useState(15)\n\n  useEffect(() => {\n    if (show == true){\n      if (seconds > 0) {\n        setTimeout(() => {setSeconds(seconds - 1)}, 1000)\n        console.log(seconds)\n      } else {\n        setSeconds(15)\n        setShow(false)\n\n        if (timelist.length == 0) {\n          timelist = [0, 3000, 6000, 9000, 12000]\n          pageDisplay[5] = false\n          pageDisplay[0] = true\n          curPage = 0\n          window.dispatchEvent(pageChange)\n        } else {\n          var timelistIndex = Math.floor(Math.random()*timelist.length)\n          time = timelist[timelistIndex]\n          timelist.splice(timelistIndex, 1)\n          trials ++\n\n          pageDisplay[5] = false\n          pageDisplay[1] = true\n          curPage = 1\n          window.dispatchEvent(pageChange)\n        }\n      }\n    }\n  })\n\n  window.addEventListener('newpage', function (e) {curPage === 5 ? setShow(true): setShow(false)}, false);\n\n  return (\n    <div>{pageDisplay[5] ? <div style={{\n      width: \"100vw\", \n      height: \"100vh\",\n      backgroundColor: \"#FF595E\",\n      position: \"fixed\",\n      zIndex: 100,\n      top: \"0px\",\n      left: \"0px\"}}>\n        <Typography align=\"center\" variant=\"h2\" style={{\n          margin: \"auto\",\n          color: \"white\",\n          position: \"relative\",\n          top: \"45%\"}}>{`[${time/1000}]`}</Typography>\n        <Typography align=\"center\" variant=\"h2\" style={{\n          margin: \"auto\",\n          color: \"white\",\n          position: \"relative\",\n          top: \"55%\"}}>{trials == 5? \"Session complete\" :`${seconds} seconds until Trial ${trials+1}`}</Typography>\n        {trials == 5? \n          <Typography align=\"center\" variant=\"h3\" style={{\n          margin: \"auto\",\n          color: \"white\",\n          position: \"relative\",\n          top: \"65%\"}}>Your proctor will now debrief you</Typography>: null}\n    </div> : null}</div>\n  )\n}\n\nfunction App() {\n  return (\n    <div style={{\n      width: \"100vw\", \n      height: \"100vh\",\n      backgroundColor: \"#303030\",\n      position: \"fixed\",\n      zIndex: 100,\n      top: \"0px\",\n      left: \"0px\"}}>\n        <StartScreen/>\n        <LearnTrigram/>\n        <WaitPeriod/>\n        <RecallScreen/>\n        <ResultsScreen/>\n        <RestScreen/>\n    </div>\n  );\n}\n\nexport default App;","D:\\Documents\\Programming\\Psych IA\\experiment-software\\src\\index.js",[],"D:\\Documents\\Programming\\Psych IA\\experiment-software\\src\\reportWebVitals.js",[],{"ruleId":"30","severity":1,"message":"31","line":14,"column":10,"nodeType":"32","messageId":"33","endLine":14,"endColumn":14},{"ruleId":"34","severity":1,"message":"35","line":30,"column":17,"nodeType":"36","messageId":"37","endLine":30,"endColumn":19},{"ruleId":"30","severity":1,"message":"31","line":52,"column":10,"nodeType":"32","messageId":"33","endLine":52,"endColumn":14},{"ruleId":"34","severity":1,"message":"35","line":55,"column":17,"nodeType":"36","messageId":"37","endLine":55,"endColumn":19},{"ruleId":"30","severity":1,"message":"31","line":89,"column":10,"nodeType":"32","messageId":"33","endLine":89,"endColumn":14},{"ruleId":"34","severity":1,"message":"35","line":92,"column":17,"nodeType":"36","messageId":"37","endLine":92,"endColumn":19},{"ruleId":"30","severity":1,"message":"31","line":120,"column":10,"nodeType":"32","messageId":"33","endLine":120,"endColumn":14},{"ruleId":"34","severity":1,"message":"35","line":123,"column":17,"nodeType":"36","messageId":"37","endLine":123,"endColumn":19},{"ruleId":"30","severity":1,"message":"31","line":161,"column":10,"nodeType":"32","messageId":"33","endLine":161,"endColumn":14},{"ruleId":"34","severity":1,"message":"35","line":164,"column":17,"nodeType":"36","messageId":"37","endLine":164,"endColumn":19},{"ruleId":"38","severity":1,"message":"39","line":205,"column":3,"nodeType":"32","endLine":205,"endColumn":12,"suggestions":"40"},{"ruleId":"34","severity":1,"message":"35","line":206,"column":14,"nodeType":"36","messageId":"37","endLine":206,"endColumn":16},{"ruleId":"34","severity":1,"message":"35","line":214,"column":29,"nodeType":"36","messageId":"37","endLine":214,"endColumn":31},{"ruleId":"34","severity":1,"message":"35","line":255,"column":32,"nodeType":"36","messageId":"37","endLine":255,"endColumn":34},{"ruleId":"34","severity":1,"message":"35","line":256,"column":17,"nodeType":"36","messageId":"37","endLine":256,"endColumn":19},"no-unused-vars","'show' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setSeconds'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [show, seconds] as a second argument to the useEffect Hook.",["41"],{"desc":"42","fix":"43"},"Add dependencies array: [show, seconds]",{"range":"44","text":"45"},[5695,5695],", [show, seconds]"]